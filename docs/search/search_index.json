{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>listmonk is a self-hosted, high performance mailing list and newsletter manager. It comes as a standalone binary and the only dependency is a Postgres database.</p> <p></p>"},{"location":"#developers","title":"Developers","text":"<p>listmonk is a free and open source software licensed under AGPLv3. If you are interested in contributing, check out the GitHub repository and refer to the developer setup. The backend is written in Go and the frontend is Vue with Buefy for UI. </p>"},{"location":"archives/","title":"Archives","text":"<p>A global public archive is maintained on the public web interface. It can be enabled under Settings -&gt; Settings -&gt; General -&gt; Enable public mailing list archive.</p> <p>To make a campaign available in the public archive (provided it has been enabled in the settings as described above), enable the option 'Publish to public archive' under Campaigns -&gt; Create new -&gt; Archive.</p> <p>When using template variables that depend on subscriber data (such as any template variable referencing <code>.Subscriber</code>), such data must be supplied as 'Campaign metadata', which is a JSON object that will be used in place of <code>.Subscriber</code> when rendering the archive template and content.</p> <p>When individual subscriber tracking is enabled, TrackLink requires that a UUID of an existing user is provided as part of the campaign metadata. Any clicks on a TrackLink from the archived campaign will be counted towards that subscriber.</p> <p>As an example:</p> <pre><code>{\n\"UUID\": \"5a837423-a186-5623-9a87-82691cbe3631\",\n\"email\": \"example@example.com\",\n\"name\": \"Reader\",\n\"attribs\": {}\n}\n</code></pre> <p></p>"},{"location":"bounces/","title":"Bounce processing","text":"<p>Enable bounce processing in Settings -&gt; Bounces. POP3 bounce scanning and APIs only become available once the setting is enabled.</p>"},{"location":"bounces/#pop3-bounce-mailbox","title":"POP3 bounce mailbox","text":"<p>Configure the bounce mailbox in Settings -&gt; Bounces. Either the \"From\" e-mail that is set on a campaign (or in settings) should have a POP3 mailbox behind it to receive bounce e-mails, or you should configure a dedicated POP3 mailbox and add that address as the <code>Return-Path</code> (envelope sender) header in Settings -&gt; SMTP -&gt; Custom headers box. For example:</p> <pre><code>[\n    {\"Return-Path\": \"your-bounce-inbox@site.com\"}\n]\n</code></pre> <p>Some mail servers may also return the bounce to the <code>Reply-To</code> address, which can also be added to the header settings.</p>"},{"location":"bounces/#webhook-api","title":"Webhook API","text":"<p>The bounce webhook API can be used to record bounce events with custom scripting. This could be by reading a mailbox, a database, or mail server logs.</p> Method Endpoint Description <code>POST</code> /webhooks/bounce Record a bounce event. Name Data type Required/Optional Description <code>subscriber_uuid</code> String Optional The UUID of the subscriber. Either this or <code>email</code> is required. <code>email</code> String Optional The e-mail of the subscriber. Either this or <code>subscriber_uuid</code> is required. <code>campaign_uuid</code> String Optional UUID of the campaign for which the bounce happened. <code>source</code> String Required A string indicating the source, eg: <code>api</code>, <code>my_script</code> etc. <code>type</code> String Required <code>hard</code> or <code>soft</code> bounce. Currently, this has no effect on how the bounce is treated. <code>meta</code> String Optional An optional escaped JSON string with arbitrary metadata about the bounce event. <pre><code>curl -u 'username:password' -X POST localhost:9000/webhooks/bounce \\\n-H \"Content-Type: application/json\" \\\n--data '{\"email\": \"user1@mail.com\", \"campaign_uuid\": \"9f86b50d-5711-41c8-ab03-bc91c43d711b\", \"source\": \"api\", \"type\": \"hard\", \"meta\": \"{\\\"additional\\\": \\\"info\\\"}}'\n</code></pre>"},{"location":"bounces/#external-webhooks","title":"External webhooks","text":"<p>listmonk supports receiving bounce webhook events from the following SMTP providers.</p> Endpoint Description More info <code>https://listmonk.yoursite.com/webhooks/service/ses</code> Amazon (AWS) SES You can use these Mautic steps as a general guide, but use your listmonk's endpoint instead. <ul> <li>When creating the topic select \"standard\" instead of the preselected \"FIFO\". You can put a name and leave everything else at default.</li> <li>When creating a subscription choose HTTPS for \"Protocol\", and leave \"Enable raw message delivery\" UNCHECKED.</li> <li>On the \"SES -&gt; verified identities\" page, make sure to check \"include original headers\".</li> <li>The Mautic screenshot suggests you should turn off email feedback forwarding, but that's completely optional depending on whether you want want email notifications.</li></ul> <code>https://listmonk.yoursite.com/webhooks/service/sendgrid</code> Sendgrid / Twilio Signed event webhook More info"},{"location":"bounces/#verification","title":"Verification","text":"<p>You can use Amazon's test emails to make sure everything's working: https://docs.aws.amazon.com/ses/latest/dg/send-an-email-from-console.html <pre><code>success@simulator.amazonses.com\nbounce@simulator.amazonses.com\ncomplaint@simulator.amazonses.com\nsuppressionlist@simulator.amazonses.com\n</code></pre> They all count as hard bounces. </p> <p>Exporting bounces: https://github.com/knadh/listmonk/issues/863</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#subscriber","title":"Subscriber","text":"<p>A subscriber is a recipient identified by an e-mail address and name. Subscribers receive e-mails that are sent from listmonk. A subscriber can be added to any number of lists. Subscribers who are not a part of any lists are considered orphan records.</p>"},{"location":"concepts/#attributes","title":"Attributes","text":"<p>Attributes are arbitrary properties attached to a subscriber in addition to their e-mail and name. They are represented as a JSON map. It is not necessary for all subscribers to have the same attributes. Subscribers can be queried and segmented into lists based on their attributes, and the attributes can be inserted into the e-mails sent to them. For example:</p> <pre><code>{\n\"city\": \"Bengaluru\",\n\"likes_tea\": true,\n\"spoken_languages\": [\"English\", \"Malayalam\"],\n\"projects\": 3,\n\"stack\": {\n\"frameworks\": [\"echo\", \"go\"],\n\"languages\": [\"go\", \"python\"],\n\"preferred_language\": \"go\"\n}\n}\n</code></pre>"},{"location":"concepts/#subscription-statuses","title":"Subscription statuses","text":"<p>A subscriber can be added to one or more lists, and each such relationship can have one of these statuses.</p> Status Description <code>unconfirmed</code> The subscriber was added to the list directly without their explicit confirmation. Nonetheless, the subscriber will receive campaign messages sent to single optin campaigns. <code>confirmed</code> The subscriber confirmed their subscription by clicking on 'accept' in the confirmation e-mail. Only confirmed subscribers in opt-in lists will receive campaign messages send to the list. <code>unsubscribed</code> The subscriber is unsubscribed from the list and will not receive any campaign messages sent to the list."},{"location":"concepts/#segmentation","title":"Segmentation","text":"<p>Segmentation is the process of filtering a large list of subscribers into a smaller group based on arbitrary conditions, primarily based on their attributes. For instance, if an e-mail needs to be sent subscribers who live in a particular city, given their city is described in their attributes, it's possible to quickly filter them out into a new list and e-mail them. Learn more.</p>"},{"location":"concepts/#list","title":"List","text":"<p>A list (or a mailing list) is a collection of subscribers grouped under a name, for instance, clients. Lists are used to organise subscribers and send e-mails to specific groups. A list can be single optin or double optin. Subscribers added to double optin lists have to explicitly accept the subscription by clicking on the confirmation e-mail they receive. Until then, they do not receive campaign messages.</p>"},{"location":"concepts/#campaign","title":"Campaign","text":"<p>A campaign is an e-mail (or any other kind of messages) that is sent to one or more lists.</p>"},{"location":"concepts/#transactional-message","title":"Transactional message","text":"<p>A transactional message is an arbitrary message sent to a subscriber using the transactional message API. For example a welcome e-mail on signing up to a service; an order confirmation e-mail on purchasing an item; a password reset e-mail when a user initiates an online account recovery process.</p>"},{"location":"concepts/#template","title":"Template","text":"<p>A template is a re-usable HTML design that can be used across campaigns and when sending arbitrary transactional messages. Most commonly, templates have standard header and footer areas with logos and branding elements, where campaign content is inserted in the middle. listmonk supports Go template expressions that lets you create powerful, dynamic HTML templates. Learn more.</p>"},{"location":"concepts/#messenger","title":"Messenger","text":"<p>listmonk supports multiple custom messaging backends in additional to the default SMTP e-mail backend, enabling not just e-mail campaigns, but arbitrary message campaigns such as SMS, FCM notifications etc. A Messenger is a web service that accepts a campaign message pushed to it as a JSON request, which the service can in turn broadcast as SMS, FCM etc. Learn more.</p>"},{"location":"concepts/#tracking-pixel","title":"Tracking pixel","text":"<p>The tracking pixel is a tiny, invisible image that is inserted into an e-mail body to track e-mail views. This allows measuring the read rate of e-mails. While this is exceedingly common in e-mail campaigns, it carries privacy implications and should be used in compliance with rules and regulations such as GDPR. It is possible to track reads anonymously without associating an e-mail read to a subscriber.</p>"},{"location":"concepts/#click-tracking","title":"Click tracking","text":"<p>It is possible to track the clicks on every link that is sent in an e-mail. This allows measuring the clickthrough rates of links in e-mails. While this is exceedingly common in e-mail campaigns, it carries privacy implications and should be used in compliance with rules and regulations such as GDPR. It is possible to track link clicks anonymously without associating an e-mail read to a subscriber.</p>"},{"location":"concepts/#bounce","title":"Bounce","text":"<p>A bounce occurs when an e-mail that is sent to a recipient \"bounces\" back for one of many reasons including the recipient address being invalid, their mailbox being full, or the recipient's e-mail service provider marking the e-mail as spam. listmonk can automatically process such bounce e-mails that land in a configured POP mailbox, or via APIs of SMTP e-mail providers such as AWS SES and Sengrid. Based on settings, subscribers returning bounced e-mails can either be blocklisted or deleted automatically. Learn more.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#toml-configuration-file","title":"TOML Configuration file","text":"<p>One or more TOML files can be read by passing <code>--config config.toml</code> multiple times. Apart from a few low level configuration variables and the database configuration, all other settings can be managed from the <code>Settings</code> dashboard on the admin UI.</p> <p>To generate a new sample configuration file, run <code>--listmonk --new-config</code></p>"},{"location":"configuration/#environment-variables","title":"Environment variables","text":"<p>Variables in config.toml can also be provided as environment variables prefixed by <code>LISTMONK_</code> with periods replaced by <code>__</code> (double underscore). Example:</p> Environment variable Example value <code>LISTMONK_app__address</code> \"0.0.0.0:9000\" <code>LISTMONK_app__admin_username</code> listmonk <code>LISTMONK_app__admin_password</code> listmonk <code>LISTMONK_db__host</code> db <code>LISTMONK_db__port</code> 9432 <code>LISTMONK_db__user</code> listmonk <code>LISTMONK_db__password</code> listmonk <code>LISTMONK_db__database</code> listmonk <code>LISTMONK_db__ssl_mode</code> disable"},{"location":"configuration/#customizing-system-templates","title":"Customizing system templates","text":"<p>Read this</p>"},{"location":"configuration/#http-routes","title":"HTTP routes","text":"<p>When configuring auth proxies and web application firewalls, use this table.</p>"},{"location":"configuration/#private-admin-endpoints","title":"Private admin endpoints.","text":"Methods Route Description <code>*</code> <code>/api/*</code> Admin APIs <code>GET</code> <code>/admin/*</code> Admin UI and HTML pages <code>POST</code> <code>/webhooks/bounce</code> Admin bounce webhook"},{"location":"configuration/#public-endpoints-to-expose-to-the-internet","title":"Public endpoints to expose to the internet.","text":"Methods Route Description <code>GET, POST</code> <code>/subscription/*</code> HTML subscription pages <code>GET,</code> <code>/link/*</code> Tracked link redirection <code>GET</code> <code>/campaign/*</code> Pixel tracking image <code>GET</code> <code>/public/*</code> Static files for HTML subscription pages <code>POST</code> <code>/webhooks/service/*</code> Bounce webhook endpoints for AWS and Sendgrid"},{"location":"configuration/#media-uploads","title":"Media Uploads","text":""},{"location":"configuration/#filesystem","title":"Filesystem","text":"<p>When configuring <code>docker</code> volume mounts for using filesystem media uploads, you can follow either of two approaches. The second option may be necessary if your setup requires you to use <code>sudo</code> for docker commands. </p> <p>After making any changes you will need to run <code>sudo docker-compose stop ; sudo docker-compose up</code>. </p> <p>And under <code>https://listmonk.mysite.com/admin/settings</code> you put <code>/listmonk/uploads</code>. </p>"},{"location":"configuration/#using-volumes","title":"Using volumes","text":"<p>Using <code>docker volumes</code>, you can specify the name of volume and destination for the files to be uploaded inside the container.</p> <pre><code>app:\n    volumes:\n      - type: volume\n        source: listmonk-uploads\n        target: /listmonk/uploads\n\nvolumes:\n  listmonk-uploads:\n</code></pre> <p>Note</p> <p>This volume is managed by <code>docker</code> itself, and you can see find the host path with <code>docker volume inspect listmonk_listmonk-uploads</code>.</p>"},{"location":"configuration/#using-bind-mounts","title":"Using bind mounts","text":"<p><pre><code>  app:\n    volumes:\n      - ./path/on/your/host/:/path/inside/container\n</code></pre> Eg: <pre><code>  app:\n    volumes:\n      - ./data/uploads:/listmonk/uploads\n</code></pre> The files will be available inside <code>/data/uploads</code> directory on the host machine.</p> <p>To use the default <code>uploads</code> folder: <pre><code>  app:\n    volumes:\n      - ./listmonk/uploads:/listmonk/uploads\n</code></pre></p>"},{"location":"configuration/#time-zone","title":"Time zone","text":"<p>To change listmonk's time zone (logs, etc.) edit <code>docker-compose.yml</code>: <pre><code>environment:\n    - TZ=Etc/UTC\n</code></pre> with any Timezone listed here. Then run <code>sudo docker-compose stop ; sudo docker-compose up</code> after making changes.</p>"},{"location":"developer-setup/","title":"Developer setup","text":"<p>The app has two distinct components, the Go backend and the VueJS frontend. In the dev environment, both are run independently.</p>"},{"location":"developer-setup/#pre-requisites","title":"Pre-requisites","text":"<ul> <li><code>go</code></li> <li><code>nodejs</code> (if you are working on the frontend) and <code>yarn</code></li> <li>Postgres database. If there is no local installation, the demo docker DB can be used for development (<code>docker-compose up demo-db</code>)</li> </ul>"},{"location":"developer-setup/#first-time-setup","title":"First time setup","text":"<p><code>git clone https://github.com/knadh/listmonk.git</code>. The project uses go.mod, so it's best to clone it outside the Go src path.</p> <ol> <li>Copy <code>config.toml.sample</code> as <code>config.toml</code> and add your config.</li> <li><code>make dist</code> to build the listmonk binary. Once the binary is built, run <code>./listmonk --install</code> to run the DB setup. For subsequent dev runs, use <code>make run</code>.</li> </ol> <p>mailhog is an excellent standalone mock SMTP server (with a UI) for testing and dev.</p>"},{"location":"developer-setup/#running-the-dev-environment","title":"Running the dev environment","text":"<ol> <li>Run <code>make run</code> to start the listmonk dev server on <code>:9000</code>.</li> <li>Run <code>make run-frontend</code> to start the Vue frontend in dev mode using yarn on <code>:8080</code>. All <code>/api/*</code> calls are proxied to the app running on <code>:9000</code>. Refer to the frontend README for an overview on how the frontend is structured.</li> <li>Visit <code>http://localhost:8080</code></li> </ol>"},{"location":"developer-setup/#production-build","title":"Production build","text":"<p>Run <code>make dist</code> to build the Go binary, build the Javascript frontend, and embed the static assets producing a single self-contained binary, <code>listmonk</code></p>"},{"location":"external-integration/","title":"Integrating with external systems","text":"<p>In many environments, a mailing list manager's subscriber database is not run independently but as a part of an existing customer database or a CRM. There are multiple ways of keeping listmonk in sync with external systems.</p>"},{"location":"external-integration/#using-apis","title":"Using APIs","text":"<p>The subscriber APIs offers several APIs to manipulate the subscribers database, like addition, updation, and deletion. For bulk synchronisation, a CSV can be generated (and optionally zipped) and posted to the import API.</p>"},{"location":"external-integration/#interacting-directly-with-the-db","title":"Interacting directly with the DB","text":"<p>listmonk uses tables with simple schemas to represent subscribers (<code>subscribers</code>), lists (<code>lists</code>), and subscriptions (<code>subscriber_lists</code>). It is easy to add, update, and delete subscriber information directly with the database tables for advanced usecases. See the table schemas for more information.</p>"},{"location":"i18n/","title":"Internationalization (i18n)","text":"<p>listmonk comes available in multiple languages thanks to language packs contributed by volunteers. A language pack is a JSON file with a map of keys and corresponding translations. The bundled languages can be viewed here.</p>"},{"location":"i18n/#additional-language-packs","title":"Additional language packs","text":"<p>These additional language packs can be downloaded and passed to listmonk with the <code>--i18n-dir</code> flag as described in the next section.</p> Language Description Deutsch (formal) German language with formal pronouns"},{"location":"i18n/#customizing-languages","title":"Customizing languages","text":"<p>To customize an existing language or to load a new language, put one or more <code>.json</code> language files in a directory, and pass the directory path to listmonk with the<code>--i18n-dir=/path/to/dir</code> flag.</p>"},{"location":"i18n/#contributing-a-new-language","title":"Contributing a new language","text":""},{"location":"i18n/#using-the-basic-editor","title":"Using the basic editor","text":"<ul> <li>Visit https://listmonk.app/i18n</li> <li>Click on <code>Createa new language</code>, or to make changes to an existing language, use <code>Load language</code>.</li> <li>Translate the text in the text fields on the UI.</li> <li>Once done, use the <code>Download raw JSON</code> to download the language file.</li> <li>Send a pull request to add the file to the i18n directory on the GitHub repo. </li> </ul>"},{"location":"i18n/#using-inlang-external-service","title":"Using InLang (external service)","text":"<ul> <li>Visit https://inlang.com/editor/github.com/knadh/listmonk</li> <li>To make changes and push them, you need to log in to GitHub using OAuth and fork the project from the UI.</li> <li>Translate the text in the input fields on the UI. You can use the filters to see only the necessary translations.</li> <li>Once you're done, push the changes from the UI and click on \"Open a pull request.\" This will take you to GitHub, where you can write a PR message.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>listmonk requires Postgres \u2a7e 12.</p>"},{"location":"installation/#binary","title":"Binary","text":"<ul> <li>Download the latest release and extract the listmonk binary.</li> <li><code>./listmonk --new-config</code> to generate config.toml. Then, edit the file.</li> <li><code>./listmonk --install</code> to install the tables in the Postgres DB.</li> <li>Run <code>./listmonk</code> and visit <code>http://localhost:9000</code>.</li> </ul>"},{"location":"installation/#docker","title":"Docker","text":"<p>The latest image is available on DockerHub at <code>listmonk/listmonk:latest</code></p> <p>Use the sample docker-compose.yml to run listmonk and Postgres DB with docker-compose as follows:</p>"},{"location":"installation/#demo","title":"Demo","text":""},{"location":"installation/#easy-docker-install","title":"Easy Docker install","text":"<pre><code>mkdir listmonk-demo\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/knadh/listmonk/master/install-demo.sh)\"\n</code></pre>"},{"location":"installation/#manual-docker-install","title":"Manual Docker install","text":"<pre><code>wget -O docker-compose.yml https://raw.githubusercontent.com/knadh/listmonk/master/docker-compose.yml\ndocker-compose up -d demo-db demo-app\n</code></pre> <p>Warning</p> <p>The demo does not persist Postgres after the containers are removed. DO NOT use this demo setup in production.</p>"},{"location":"installation/#production","title":"Production","text":""},{"location":"installation/#easy-docker-install_1","title":"Easy Docker install","text":"<p>This setup is recommended if you want to quickly setup <code>listmonk</code> in production.</p> <pre><code>mkdir listmonk\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/knadh/listmonk/master/install-prod.sh)\"\n</code></pre> <p>The above shell script performs the following actions:</p> <ul> <li>Downloads <code>docker-compose.yml</code> and generates a <code>config.toml</code>.</li> <li>Runs a Postgres container and installs the database schema.</li> <li>Runs the <code>listmonk</code> container.</li> </ul> <p>Note</p> <p>It's recommended to examine the contents of the shell script, before running in your environment.</p>"},{"location":"installation/#manual-docker-install_1","title":"Manual Docker install","text":"<p>The following workflow is recommended to setup <code>listmonk</code> manually using <code>docker-compose</code>. You are encouraged to customise the contents of <code>docker-compose.yml</code> to your needs. The overall setup looks like:</p> <ul> <li><code>docker-compose up db</code> to run the Postgres DB.</li> <li><code>docker-compose run --rm app ./listmonk --install</code> to setup the DB (or <code>--upgrade</code> to upgrade an existing DB).</li> <li>Copy <code>config.toml.sample</code> to your directory and make the following changes:<ul> <li><code>app.address</code> =&gt; <code>0.0.0.0:9000</code> (Port forwarding on Docker will work only if the app is advertising on all interfaces.)</li> <li><code>db.host</code> =&gt; <code>listmonk_db</code> (Container Name of the DB container)</li> </ul> </li> <li>Run <code>docker-compose up app</code> and visit <code>http://localhost:9000</code>.</li> </ul>"},{"location":"installation/#mounting-a-custom-configtoml","title":"Mounting a custom config.toml","text":"<p>To mount a local <code>config.toml</code> file, add the following section to <code>docker-compose.yml</code>:</p> <pre><code>  app:\n    &lt;&lt;: *app-defaults\n    depends_on:\n      - db\n    volumes:\n    - ./path/on/your/host/config.toml:/listmonk/config.toml\n</code></pre> <p>Note</p> <p>Some common changes done inside <code>config.toml</code> for Docker based setups:</p> <ul> <li>Change <code>app.address</code> to <code>0.0.0.0:9000</code>.</li> <li>Change <code>db.host</code> to <code>listmonk_db</code>.</li> </ul> <p>Here's a sample <code>config.toml</code> you can use:</p> <pre><code>[app]\naddress = \"0.0.0.0:9000\"\nadmin_username = \"listmonk\"\nadmin_password = \"listmonk\"\n\n# Database.\n[db]\nhost = \"listmonk_db\"\nport = 5432\nuser = \"listmonk\"\npassword = \"listmonk\"\ndatabase = \"listmonk\"\nssl_mode = \"disable\"\nmax_open = 25\nmax_idle = 25\nmax_lifetime = \"300s\"\n</code></pre> <p>Mount the local <code>config.toml</code> inside the container at <code>listmonk/config.toml</code>.</p> <p>Tip</p> <ul> <li>See configuring with environment variables for variables like <code>app.admin_password</code> and <code>db.password</code></li> <li>Ensure that both <code>app</code> and <code>db</code> containers are in running. If the containers are not running, restart them <code>docker-compose restart app db</code>.</li> <li>Refer to this tutorial for setting up a production instance with Docker + Nginx + LetsEncrypt SSL.</li> </ul> <p>Info</p> <p>The example <code>docker-compose.yml</code> file works with Docker Engine 18.06.0+ and <code>docker-compose</code> which supports file format 3.7.</p>"},{"location":"installation/#compiling-from-source","title":"Compiling from source","text":"<p>To compile the latest unreleased version (<code>master</code> branch):</p> <ol> <li>Make sure <code>go</code>, <code>nodejs</code>, and <code>yarn</code> are installed on your system.</li> <li><code>git clone git@github.com:knadh/listmonk.git</code></li> <li><code>cd listmonk &amp;&amp; make dist</code>. This will generate the <code>listmonk binary</code>.</li> </ol>"},{"location":"installation/#release-candidate-rc","title":"Release candidate (RC)","text":"<p>The <code>master</code> branch with bleeding edge changes is periodically built and published as <code>listmonk/listmonk:rc</code> on DockerHub. To run the latest pre-release version, replace all instances of <code>listmonk/listmonk:latest</code> with <code>listmonk/listmonk:rc</code> in the docker-compose.yml file and follow the Docker installation steps above. While it is generally safe to run release candidate versions, they may have issues that only get resolved in a general release.</p>"},{"location":"installation/#3rd-party-hosting","title":"3rd party hosting","text":"<p> Tutorial for deploying on Fly.io</p>"},{"location":"messengers/","title":"Messengers","text":"<p>listmonk supports multiple custom messaging backends in additional to the default SMTP e-mail backend, enabling not just e-mail campaigns, but arbitrary message campaigns such as SMS, FCM notifications etc.</p> <p>A Messenger is a web service that accepts a campaign message pushed to it as a JSON request, which the service can in turn broadcast as SMS, FCM etc. Messengers are registered in the Settings -&gt; Messengers UI, and can be selected on individual campaigns.</p> <p>Messengers support optional BasicAuth authentication. <code>Plain text</code> format for campaign content is ideal for messengers such as SMS and FCM.</p> <p>When a campaign starts, listmonk POSTs messages in the following format to the selected messenger's endpoint. The endpoint should return a <code>200 OK</code> response in case of a successful request.</p> <p>The address required to broadcast the message, for instance, a phone number or an FCM ID, is expected to be stored and relayed as subscriber attributes. </p> <pre><code>{\n\"subject\": \"Welcome to listmonk\",\n\"body\": \"The message body\",\n\"content_type\": \"plain\",\n\"recipients\": [{\n\"uuid\": \"e44b4135-1e1d-40c5-8a30-0f9a886c2884\",\n\"email\": \"anon@example.com\",\n\"name\": \"Anon Doe\",\n\"attribs\": {\n\"phone\": \"123123123\",\n\"fcm_id\": \"2e7e4b512e7e4b512e7e4b51\",\n\"city\": \"Bengaluru\"\n},\n\"status\": \"enabled\"\n}],\n\"campaign\": {\n\"uuid\": \"2e7e4b51-f31b-418a-a120-e41800cb689f\",\n\"name\": \"Test campaign\",\n\"tags\": [\"test-campaign\"]\n}\n}\n</code></pre>"},{"location":"messengers/#messenger-implementations","title":"Messenger implementations","text":"<p>Following is a list of HTTP messenger servers that connect to various backends.</p> Name Backend listmonk-messenger AWS Pinpoint SMS"},{"location":"querying-and-segmentation/","title":"Querying and segmenting subscribers","text":"<p>listmonk allows the writing of partial Postgres SQL expressions to query, filter, and segment subscribers.</p>"},{"location":"querying-and-segmentation/#database-fields","title":"Database fields","text":"<p>These are the fields in the subscriber database that can be queried.</p> Field Description <code>subscribers.uuid</code> The randomly generated unique ID of the subscriber <code>subscribers.email</code> E-mail ID of the subscriber <code>subscribers.name</code> Name of the subscriber <code>subscribers.status</code> Status of the subscriber (enabled, disabled, blocklisted) <code>subscribers.attribs</code> Map of arbitrary attributes represented as JSON. Accessed via the <code>-&gt;</code> and <code>-&gt;&gt;</code> Postgres operator. <code>subscribers.created_at</code> Timestamp when the subscriber was first added <code>subscribers.updated_at</code> Timestamp when the subscriber was modified"},{"location":"querying-and-segmentation/#sample-attributes","title":"Sample attributes","text":"<p>Here's a sample JSON map of attributes assigned to an imaginary subscriber.</p> <pre><code>{\n\"city\": \"Bengaluru\",\n\"likes_tea\": true,\n\"spoken_languages\": [\"English\", \"Malayalam\"],\n\"projects\": 3,\n\"stack\": {\n\"frameworks\": [\"echo\", \"go\"],\n\"languages\": [\"go\", \"python\"],\n\"preferred_language\": \"go\"\n}\n}\n</code></pre> <p></p>"},{"location":"querying-and-segmentation/#sample-sql-query-expressions","title":"Sample SQL query expressions","text":""},{"location":"querying-and-segmentation/#find-a-subscriber-by-e-mail","title":"Find a subscriber by e-mail","text":"<pre><code>-- Exact match\nsubscribers.email = 'some@domain.com'\n\n-- Partial match to find e-mails that end in @domain.com.\nsubscribers.email LIKE '%@domain.com'\n</code></pre>"},{"location":"querying-and-segmentation/#find-a-subscriber-by-name","title":"Find a subscriber by name","text":"<pre><code>-- Find all subscribers whose name start with John.\nsubscribers.email LIKE 'John%'\n</code></pre>"},{"location":"querying-and-segmentation/#multiple-conditions","title":"Multiple conditions","text":"<pre><code>-- Find all Johns who have been blocklisted.\nsubscribers.email LIKE 'John%' AND status = 'blocklisted'\n</code></pre>"},{"location":"querying-and-segmentation/#querying-attributes","title":"Querying attributes","text":"<pre><code>-- The -&gt;&gt; operator returns the value as text. Find all subscribers\n-- who live in Bengaluru and have done more than 3 projects.\n-- Here 'projects' is cast into an integer so that we can apply the\n-- numerical operator &gt;\nsubscribers.attribs-&gt;&gt;'city' = 'Bengaluru' AND\n(subscribers.attribs-&gt;&gt;'projects')::INT &gt; 3\n</code></pre>"},{"location":"querying-and-segmentation/#querying-nested-attributes","title":"Querying nested attributes","text":"<pre><code>-- Find all blocklisted subscribers who like to drink tea, can code Python\n-- and prefer coding Go.\n--\n-- The -&gt; operator returns the value as a structure. Here, the \"languages\" field\n-- The ? operator checks for the existence of a value in a list.\nsubscribers.status = 'blocklisted' AND\n(subscribers.attribs-&gt;&gt;'likes_tea')::BOOLEAN = true AND\nsubscribers.attribs-&gt;'stack'-&gt;'languages' ? 'python' AND\nsubscribers.attribs-&gt;'stack'-&gt;&gt;'preferred_language' = 'go'\n</code></pre> <p>To learn how to write SQL expressions to do advancd querying on JSON attributes, refer to the Postgres JSONB documentation.</p>"},{"location":"templating/","title":"Templating","text":"<p>A template is a re-usable HTML design that can be used across campaigns and transactional messages. Most commonly, templates have standard header and footer areas with logos and branding elements, where campaign content is inserted in the middle. listmonk supports Go template expressions that lets you create powerful, dynamic HTML templates.</p> <p>listmonk supports Go template expressions that lets you create powerful, dynamic HTML templates. It also integrates 100+ useful Sprig template functions.</p>"},{"location":"templating/#campaign-templates","title":"Campaign templates","text":"<p>Campaign templates are used in an e-mail campaigns. These template are created and managed on the UI under <code>Campaigns -&gt; Templates</code>, and are selected when creating new campaigns.</p>"},{"location":"templating/#transactional-templates","title":"Transactional templates","text":"<p>Transactional templates are used for sending arbitrary transactional messages using the transactional API. These template are created and managed on the UI under <code>Campaigns -&gt; Templates</code>.</p>"},{"location":"templating/#template-expressions","title":"Template expressions","text":"<p>There are several template functions and expressions that can be used in campaign and template bodies. They are written in the form <code>{{ .Subscriber.Email }}</code>, that is, an expression between double curly braces <code>{{</code> and <code>}}</code>.</p>"},{"location":"templating/#subscriber-fields","title":"Subscriber fields","text":"Expression Description <code>{{ .Subscriber.UUID }}</code> The randomly generated unique ID of the subscriber <code>{{ .Subscriber.Email }}</code> E-mail ID of the subscriber <code>{{ .Subscriber.Name }}</code> Name of the subscriber <code>{{ .Subscriber.FirstName }}</code> First name of the subscriber (automatically extracted from the name) <code>{{ .Subscriber.LastName }}</code> Last name of the subscriber (automatically extracted from the name) <code>{{ .Subscriber.Status }}</code> Status of the subscriber (enabled, disabled, blocklisted) <code>{{ .Subscriber.Attribs }}</code> Map of arbitrary attributes. Fields can be accessed with <code>.</code>, eg: <code>.Subscriber.Attribs.city</code> <code>{{ .Subscriber.CreatedAt }}</code> Timestamp when the subscriber was first added <code>{{ .Subscriber.UpdatedAt }}</code> Timestamp when the subscriber was modified Expression Description <code>{{ .Campaign.UUID }}</code> The randomly generated unique ID of the campaign <code>{{ .Campaign.Name }}</code> Internal name of the campaign <code>{{ .Campaign.Subject }}</code> E-mail subject of the campaign <code>{{ .Campaign.FromEmail }}</code> The e-mail address from which the campaign is being sent"},{"location":"templating/#functions","title":"Functions","text":"Function Description <code>{{ Date \"2006-01-01\" }}</code> Prints the current datetime for the given format expressed as a Go date layout <code>{{ TrackLink \"https://link.com\" }}</code> Takes a URL and generates a tracking URL over it. For use in campaign bodies and templates. <code>https://link.com@TrackLink</code> Shorthand for <code>TrackLink</code>. Eg: <code>&lt;a href=\"https://link.com@TrackLink\"&gt;Link&lt;/a&gt;</code> <code>{{ TrackView }}</code> Inserts a single tracking pixel. Should only be used once, ideally in the template footer. <code>{{ UnsubscribeURL }}</code> Unsubscription and Manage preferences URL. Ideal for use in the template footer. <code>{{ MessageURL }}</code> URL to view the hosted version of an e-mail message. <code>{{ OptinURL }}</code> URL to the double-optin confirmation page. <code>{{ Safe \"&lt;!-- comment --&gt;\" }}</code> Add any HTML code as it is."},{"location":"templating/#sprig-functions","title":"Sprig functions","text":"<p>listmonk integrates the Sprig library that offers 100+ utility functions for working with strings, numbers, dates etc. that can be used in templating. Refer to the Sprig documentation for the full list of functions.</p>"},{"location":"templating/#example-template","title":"Example template","text":"<p>The expression <code>{{ template \"content\" . }}</code> should appear exactly once in every template denoting the spot where an e-mail's content is inserted. Here's a sample HTML e-mail that has a fixed header and footer that inserts the content in the middle.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\nbody {\nbackground: #eee;\nfont-family: Arial, sans-serif;\nfont-size: 6px;\ncolor: #111;\n}\nheader {\nborder-bottom: 1px solid #ddd;\npadding-bottom: 30px;\nmargin-bottom: 30px;\n}\n.container {\nbackground: #fff;\nwidth: 450px;\nmargin: 0 auto;\npadding: 30px;\n}\n&lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;section class=\"container\"&gt;\n      &lt;header&gt;\n        &lt;!-- This will appear in the header of all e-mails.\n             The subscriber's name will be automatically inserted here. //--&gt;\n        Hi {{ .Subscriber.FirstName }}!\n      &lt;/header&gt;\n\n      &lt;!-- This is where the e-mail body will be inserted //--&gt;\n      &lt;div class=\"content\"&gt;\n        {{ template \"content\" . }}\n      &lt;/div&gt;\n\n      &lt;footer&gt;\n        Copyright 2019. All rights Reserved.\n      &lt;/footer&gt;\n\n      &lt;!-- The tracking pixel will be inserted here //--&gt;\n      {{ TrackView }}\n    &lt;/section&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Info</p> <p>For use with plaintext campaigns, create a template with no HTML content and just the placeholder <code>{{ template \"content\" . }}</code></p>"},{"location":"templating/#example-campaign-body","title":"Example campaign body","text":"<p>Campaign bodies can be composed using the built-in WYSIWYG editor or as raw HTML documents. Assuming that the subscriber has a set of attributes defined, this example shows how to render those values in a campaign.</p> <pre><code>Hey, did you notice how the template showed your first name?\nYour last name is {{.Subscriber.LastName }}.\n\nYou have done {{ .Subscriber.Attribs.projects }} projects.\n\n\n{{ if eq .Subscriber.Attribs.city \"Bengaluru\" }}\n  You live in Bangalore!\n{{ else }}\n  Where do you live?\n{{ end }}\n\n\nHere is a link for you to click that will be tracked.\n&lt;a href=\"{{ TrackLink \"https://google.com\" }}\"&gt;Google&lt;/a&gt;\n</code></pre> <p>The above example uses an <code>if</code> condition to show one of two messages depending on the value of a subscriber attribute. Many such dynamic expressions are possible with Go templating expressions.</p>"},{"location":"templating/#system-templates","title":"System templates","text":"<p>System templates are used for rendering public user facing pages such as the subscription management page, and in automatically generated system e-mails such as the opt-in confirmation e-mail. These are bundled into listmonk but can be customized by copying the static directory locally, and passing its path to listmonk with the <code>./listmonk --static-dir=your/custom/path</code> flag.</p>"},{"location":"templating/#public-pages","title":"Public pages","text":"/static/public/ <code>index.html</code> Base template with the header and footer that all pages use. <code>home.html</code> Landing page on the root domain with the login button. <code>message.html</code> Generic success / failure message page. <code>optin.html</code> Opt-in confirmation page. <code>subscription.html</code> Subscription management page with options for data export and wipe. <code>subscription-form.html</code> List selection and subscription form page. <p>To edit the appearance of the public pages using CSS and Javascript, head to Settings &gt; Appearance &gt; Public:</p> <p></p>"},{"location":"templating/#system-e-mails","title":"System e-mails","text":"/static/email-templates/ <code>base.html</code> Base template with the header and footer that all system generated e-mails use. <code>campaign-status.html</code> E-mail notification that is sent to admins on campaign start, completion etc. <code>import-status.html</code> E-mail notification that is sent to admins on finish of an import job. <code>subscriber-data.html</code> E-mail that is sent to subscribers when they request a full dump of their private data. <code>subscriber-optin.html</code> Automatic opt-in confirmation e-mail that is sent to an unconfirmed subscriber when they are added. <code>subscriber-optin-campaign.html</code> E-mail content that's inserted into a campaign body when starting an opt-in campaign from the lists page. <code>default.tpl</code> Default campaign template that is created in Campaigns -&gt; Templates when listmonk is first installed. This is not used after that. <p>Info</p> <p>To turn system e-mail templates to plaintext, remove <code>&lt;!doctype html&gt;</code> from base.html and remove all HTML tags from the templates while retaining the Go templating code.</p>"},{"location":"upgrade/","title":"Upgrade","text":"<p>Some versions may require changes to the database. These changes or database \"migrations\" are applied automatically and safely, but, it is recommended to take a backup of the Postgres database before running the <code>--upgrade</code> option, especially if you have made customizations to the database tables.</p>"},{"location":"upgrade/#binary","title":"Binary","text":"<ul> <li>Download the latest release and extract the listmonk binary.</li> <li><code>./listmonk --upgrade</code> to upgrade an existing DB. Upgrades are idempotent and running them multiple times have no side effects.</li> <li>Run <code>./listmonk</code> and visit <code>http://localhost:9000</code>.</li> </ul>"},{"location":"upgrade/#docker","title":"Docker","text":"<ul> <li><code>docker-compose pull</code> to pull the latest version from DockerHub.</li> <li><code>docker-compose run --rm app ./listmonk --upgrade</code> to upgrade an existing DB.</li> <li>Run <code>docker-compose up app db</code> and visit <code>http://localhost:9000</code>.</li> </ul>"},{"location":"upgrade/#railway","title":"Railway","text":"<ul> <li>Head to your dashboard, and select your Listmonk project.</li> <li>Select the GitHub deployment service.</li> <li>In the Deployment tab, head to the latest deployment, click on the three vertical dots to the right, and select \"Redeploy\".</li> </ul>"},{"location":"upgrade/#downgrade","title":"Downgrade","text":"<p>To restore a previous version, you have to restore the DB for that particular version. DBs that have been upgraded with a particular version shouldn't be used with older versions. There may be DB changes that a new version brings that are incompatible with previous versions.</p> <p>General steps:</p> <ol> <li>Stop listmonk.</li> <li>Restore your pre-upgrade database.</li> <li>If you're using docker-compose, edit <code>docker-compose.yml</code> and change <code>listmonk:latest</code> to <code>listmonk:v2.4.0</code> (for example).</li> <li>Restart.</li> </ol> <p>Example with docker:</p> <ol> <li>Stop listmonk (app): <pre><code>sudo docker container stop listmonk_app\n</code></pre></li> <li>Restore your pre-upgrade db (required) (be careful, this will wipe your existing DB): <pre><code>psql -h 127.0.0.1 -p 9432 -U listmonk\ndrop schema public cascade;\ncreate schema public;\n\\q\npsql -h 127.0.0.1 -p 9432 -U listmonk -W listmonk &lt; listmonk-preupgrade-db.sql\n</code></pre></li> <li>Edit the <code>docker-compose.yml</code>: <pre><code>x-app-defaults: &amp;app-defaults\n  restart: unless-stopped\n  image: listmonk/listmonk:v2.4.0\n</code></pre></li> <li>Restart: <code>sudo docker-compose up -d app db nginx certbot</code></li> </ol>"},{"location":"apis/apis/","title":"APIs","text":"<p>All features that are available on the listmonk dashboard are also available as REST-like HTTP APIs that can be interacted with directly. Request and response bodies are JSON. This allows easy scripting of listmonk and integration with other systems, for instance, synchronisation with external subscriber databases.</p> <p>API requests require BasicAuth authentication with the admin credentials.</p> <p>The API section is a work in progress. There may be API calls that are yet to be documented. Please consider contributing to docs.</p>"},{"location":"apis/apis/#openapi-swagger-spec","title":"OpenAPI (Swagger) spec","text":"<p>The auto-generated OpenAPI (Swagger) specification site for the APIs are available at listmonk.app/docs/swagger</p>"},{"location":"apis/apis/#response-structure","title":"Response structure","text":""},{"location":"apis/apis/#successful-request","title":"Successful request","text":"<pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\"data\": {}\n}\n</code></pre> <p>All responses from the API server are JSON with the content-type application/json unless explicitly stated otherwise. A successful 200 OK response always has a JSON response body with a status key with the value success. The data key contains the full response payload.</p>"},{"location":"apis/apis/#failed-request","title":"Failed request","text":"<pre><code>HTTP/1.1 500 Server error\nContent-Type: application/json\n\n{\n\"message\": \"Error message\"\n}\n</code></pre> <p>A failure response is preceded by the corresponding 40x or 50x HTTP header. There may be an optional <code>data</code> key with additional payload.</p>"},{"location":"apis/apis/#timestamps","title":"Timestamps","text":"<p>All timestamp fields are in the format <code>2019-01-01T09:00:00.000000+05:30</code>. The seconds component is suffixed by the milliseconds, followed by the <code>+</code> and the timezone offset.</p>"},{"location":"apis/apis/#common-http-error-codes","title":"Common HTTP error codes","text":"code <code>400</code> Missing or bad request parameters or values <code>403</code> Session expired or invalidate. Must relogin <code>404</code> Request resource was not found <code>405</code> Request method (GET, POST etc.) is not allowed on the requested endpoint <code>410</code> The requested resource is gone permanently <code>429</code> Too many requests to the API (rate limiting) <code>500</code> Something unexpected went wrong <code>502</code> The backend OMS is down and the API is unable to communicate with it <code>503</code> Service unavailable; the API is down <code>504</code> Gateway timeout; the API is unreachable"},{"location":"apis/campaigns/","title":"API / Campaigns","text":"Method Endpoint Description <code>GET</code> /api/campaigns Gets all campaigns. <code>GET</code> /api/campaigns/:<code>campaign_id</code> Gets a single campaign. <code>GET</code> /api/campaigns/:<code>campaign_id</code>/preview Gets the HTML preview of a campaign body. <code>GET</code> /api/campaigns/running/stats Gets the stats of a given set of campaigns. <code>POST</code> /api/campaigns Creates a new campaign. <code>POST</code> /api/campaigns/:<code>campaign_id</code>/test Posts campaign message to arbitrary subscribers for testing. <code>PUT</code> /api/campaigns/:<code>campaign_id</code> Modifies a campaign. <code>PUT</code> /api/campaigns/:<code>campaign_id</code>/status Start / pause / cancel / schedule a campaign. <code>DELETE</code> /api/campaigns/:<code>campaign_id</code> Deletes a campaign."},{"location":"apis/campaigns/#get-apicampaigns","title":"<code>GET</code> /api/campaigns","text":"<p>Gets all campaigns.</p>"},{"location":"apis/campaigns/#example-request","title":"Example Request","text":"<pre><code> curl -u \"username:password\" -X GET 'http://localhost:9000/api/campaigns?page=1&amp;per_page=100'\n</code></pre>"},{"location":"apis/campaigns/#parameters","title":"Parameters","text":"<p>Name    | Type   | Required/Optional   | Description --------|--------------------|-------------|---------------------|--------------------- <code>query</code> | string      | Optional            |  Optional string to search a list by name. <code>order_by</code> | string      | Optional            |  Field to sort results by. <code>name|status|created_at|updated_at</code> <code>order</code> | string      | Optional            |  <code>ASC|DESC</code>Sort by ascending or descending order. <code>page</code> | number      | Optional            |  Page number for paginated results. <code>per_page</code> | number      | Optional            |  Results to return per page. Setting this to <code>all</code> skips pagination and returns all results.</p>"},{"location":"apis/campaigns/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"results\": [\n{\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n\"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n\"CampaignID\": 0,\n\"views\": 0,\n\"clicks\": 0,\n\"lists\": [\n{\n\"id\": 1,\n\"name\": \"Default list\"\n}\n],\n\"started_at\": null,\n\"to_send\": 0,\n\"sent\": 0,\n\"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n\"type\": \"regular\",\n\"name\": \"Test campaign\",\n\"subject\": \"Welcome to listmonk\",\n\"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n\"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n\"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n\"status\": \"draft\",\n\"content_type\": \"richtext\",\n\"tags\": [\n\"test-campaign\"\n],\n\"template_id\": 1,\n\"messenger\": \"email\"\n}\n],\n\"query\": \"\",\n\"total\": 1,\n\"per_page\": 20,\n\"page\": 1\n}\n}\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignscampaign_id","title":"<code>GET</code> /api/campaigns/:<code>campaign_id</code>","text":"<p>Gets a single campaign.</p>"},{"location":"apis/campaigns/#parameters_1","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>campaign_id</code> Path Parameter Number Required The id  value of the campaign you want to get."},{"location":"apis/campaigns/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"username:password\" -X GET 'http://localhost:9000/api/campaigns/1'\n</code></pre>"},{"location":"apis/campaigns/#example-response_1","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n\"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n\"CampaignID\": 0,\n\"views\": 0,\n\"clicks\": 0,\n\"lists\": [\n{\n\"id\": 1,\n\"name\": \"Default list\"\n}\n],\n\"started_at\": null,\n\"to_send\": 0,\n\"sent\": 0,\n\"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n\"type\": \"regular\",\n\"name\": \"Test campaign\",\n\"subject\": \"Welcome to listmonk\",\n\"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n\"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n\"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n\"status\": \"draft\",\n\"content_type\": \"richtext\",\n\"tags\": [\n\"test-campaign\"\n],\n\"template_id\": 1,\n\"messenger\": \"email\"\n}\n}\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignscampaign_idpreview","title":"<code>GET</code> /api/campaigns/:<code>campaign_id</code>/preview","text":"<p>Gets the html preview of a campaign body.</p>"},{"location":"apis/campaigns/#parameters_2","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>campaign_id</code> Path Parameter Number Required The id value of the campaign to be previewed."},{"location":"apis/campaigns/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"username:password\" -X GET 'http://localhost:9000/api/campaigns/1/preview'\n</code></pre>"},{"location":"apis/campaigns/#example-response_2","title":"Example Response","text":"<pre><code>&lt;h3&gt;Hi John!&lt;/h3&gt;\nThis is a test e-mail campaign. Your second name is Doe and you are from Bengaluru.\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignsrunningstats","title":"<code>GET</code> /api/campaigns/running/stats","text":"<p>Gets the running stat of a given set of campaigns.</p>"},{"location":"apis/campaigns/#parameters_3","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description campaign_id Query Parameters Number Required The id values of the campaigns whose stat you want to get."},{"location":"apis/campaigns/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"username:password\" -X GET 'http://localhost:9000/api/campaigns/running/stats?campaign_id=1'\n</code></pre>"},{"location":"apis/campaigns/#example-response_3","title":"Example Response","text":"<pre><code>{\n\"data\": []\n}\n</code></pre>"},{"location":"apis/campaigns/#post-apicampaigns","title":"<code>POST</code> /api/campaigns","text":"<p>Creates a new campaign.</p>"},{"location":"apis/campaigns/#parameters_4","title":"Parameters","text":"Name Data type Required/Optional Description <code>name</code> String Required Name of the campaign. <code>subject</code> String Required (E-mail) subject of the campaign. <code>lists</code> []Number Required Array of list IDs to send the campaign to. <code>from_email</code> String Optional <code>From</code> e-mail to show on the campaign e-mails. If left empty, the default value from settings is used. <code>type</code> String Required <code>regular</code> or <code>optin</code> campaign. <code>content_type</code> String Required <code>richtext</code>, <code>html</code>, <code>markdown</code>, <code>plain</code> <code>body</code> String Required Campaign content body. <code>altbody</code> String Optional Alternate plain text body for HTML (and richtext) e-mails. <code>send_at</code> String Optional A timestamp to schedule the campaign at. Eg: <code>2021-12-25T06:00:00</code> (YYYY-MM-DDTHH:MM:SS) <code>messenger</code> String Optional <code>email</code> or a custom messenger defined in the settings. If left empty, <code>email</code> is used. <code>template_id</code> Number Optional ID of the template to use. If left empty, the default template is used. <code>tags</code> []String Optional Array of string tags to mark the campaign."},{"location":"apis/campaigns/#example-request_4","title":"Example request","text":"<pre><code>curl -u \"username:password\" 'http://localhost:9000/api/campaigns' -X POST -H 'Content-Type: application/json;charset=utf-8' --data-raw '{\"name\":\"Test campaign\",\"subject\":\"Hello, world\",\"lists\":[1],\"from_email\":\"listmonk &lt;noreply@listmonk.yoursite.com&gt;\",\"content_type\":\"richtext\",\"messenger\":\"email\",\"type\":\"regular\",\"tags\":[\"test\"],\"template_id\":1}'\n</code></pre>"},{"location":"apis/campaigns/#example-response_4","title":"Example response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2021-12-27T11:50:23.333485Z\",\n\"updated_at\": \"2021-12-27T11:50:23.333485Z\",\n\"views\": 0,\n\"clicks\": 0,\n\"bounces\": 0,\n\"lists\": [{\n\"id\": 1,\n\"name\": \"Default list\"\n}],\n\"started_at\": null,\n\"to_send\": 1,\n\"sent\": 0,\n\"uuid\": \"90c889cc-3728-4064-bbcb-5c1c446633b3\",\n\"type\": \"regular\",\n\"name\": \"Test campaign\",\n\"subject\": \"Hello, world\",\n\"from_email\": \"listmonk \\u003cnoreply@listmonk.yoursite.com\\u003e\",\n\"body\": \"\",\n\"altbody\": null,\n\"send_at\": null,\n\"status\": \"draft\",\n\"content_type\": \"richtext\",\n\"tags\": [\"test\"],\n\"template_id\": 1,\n\"messenger\": \"email\"\n}\n}\n</code></pre>"},{"location":"apis/campaigns/#put-apicampaignscampaign_idstatus","title":"<code>PUT</code> /api/campaigns/:<code>campaign_id</code>/status","text":"<p>Modifies a campaign status to start, pause, cancel, or schedule a campaign.</p>"},{"location":"apis/campaigns/#parameters_5","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>campaign_id</code> Path Parameter Number Required The id value of the campaign whose status is to be modified. <code>status</code> Request Body String Required <code>scheduled</code>, <code>running</code>, <code>paused</code>, <code>cancelled</code>."},{"location":"apis/campaigns/#note","title":"Note:","text":"<ul> <li>Only \"scheduled\" campaigns can be saved as \"draft\".</li> <li>Only \"draft\" campaigns can be \"scheduled\".</li> <li>Only \"paused\" campaigns and \"draft\" campaigns can be started.</li> <li>Only \"running\" campaigns can be \"cancelled\" and \"paused\".</li> </ul>"},{"location":"apis/campaigns/#example-request_5","title":"Example Request","text":"<pre><code>curl -u \"username:password\" -X PUT 'http://localhost:9000/api/campaigns/1/status' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"status\":\"scheduled\"}'\n</code></pre>"},{"location":"apis/campaigns/#example-response_5","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n\"updated_at\": \"2020-04-08T19:35:17.331867+01:00\",\n\"CampaignID\": 0,\n\"views\": 0,\n\"clicks\": 0,\n\"lists\": [\n{\n\"id\": 1,\n\"name\": \"Default list\"\n}\n],\n\"started_at\": null,\n\"to_send\": 0,\n\"sent\": 0,\n\"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n\"type\": \"regular\",\n\"name\": \"Test campaign\",\n\"subject\": \"Welcome to listmonk\",\n\"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n\"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n\"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n\"status\": \"scheduled\",\n\"content_type\": \"richtext\",\n\"tags\": [\n\"test-campaign\"\n],\n\"template_id\": 1,\n\"messenger\": \"email\"\n}\n}\n</code></pre>"},{"location":"apis/campaigns/#delete-apicampaignscampaign_id","title":"<code>DELETE</code> /api/campaigns/:<code>campaign_id</code>","text":"<p>Deletes a campaign, only scheduled campaigns that have not yet been started can be deleted.  </p>"},{"location":"apis/campaigns/#parameters_6","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>campaign_id</code> Path Parameter Number Required The id value of the campaign you want to delete."},{"location":"apis/campaigns/#example-request_6","title":"Example Request","text":"<pre><code>curl -u \"username:password\" -X DELETE 'http://localhost:9000/api/campaigns/34'\n</code></pre>"},{"location":"apis/campaigns/#example-response_6","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/import/","title":"API / Import","text":"Method Endpoint Description <code>GET</code> api/import/subscribers Gets a import statistics. <code>GET</code> api/import/subscribers/logs Get a import statistics . <code>POST</code> api/import/subscribers Upload a ZIP file or CSV file to bulk import subscribers. <code>DELETE</code> api/import/subscribers Stops and deletes a import."},{"location":"apis/import/#get-apiimportsubscribers","title":"<code>GET</code> api/import/subscribers","text":"<p>Gets import status.</p>"},{"location":"apis/import/#example-request","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/import/subscribers'\n</code></pre>"},{"location":"apis/import/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"name\": \"\",\n\"total\": 0,\n\"imported\": 0,\n\"status\": \"none\"\n}\n}\n</code></pre>"},{"location":"apis/import/#get-apiimportsubscriberslogs","title":"<code>GET</code> api/import/subscribers/logs","text":"<p>Gets import logs.</p>"},{"location":"apis/import/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/import/subscribers/logs'\n</code></pre>"},{"location":"apis/import/#example-response_1","title":"Example Response","text":"<pre><code>{\n\"data\": \"2020/04/08 21:55:20 processing 'import.csv'\\n2020/04/08 21:55:21 imported finished\\n\"\n}\n</code></pre>"},{"location":"apis/import/#post-apiimportsubscribers","title":"<code>POST</code> api/import/subscribers","text":"<p>Post a CSV (optionally zipped) file to do a bulk import. The request should be a multipart form POST.</p>"},{"location":"apis/import/#parameters","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>params</code> Request body String Required Stringified JSON with import params <code>file</code> Request body File Required File to upload <p>params (JSON string)</p> <pre><code>    {\n\"mode\": \"subscribe\", // subscribe or blocklist\n\"delim\": \",\",        // delimiter in the uploaded file\n\"lists\":[1],         // array of list IDs to import into\n\"overwrite\": true    // overwrite existing entries or skip them?\n}\n</code></pre>"},{"location":"apis/import/#delete-apiimportsubscribers","title":"<code>DELETE</code> api/import/subscribers","text":"<p>Stops and deletes an import.</p>"},{"location":"apis/import/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X DELETE 'http://localhost:9000/api/import/subscribers' </code></pre>"},{"location":"apis/import/#example-response_2","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"name\": \"\",\n\"total\": 0,\n\"imported\": 0,\n\"status\": \"none\"\n}\n}\n</code></pre>"},{"location":"apis/lists/","title":"API / Lists","text":"Method Endpoint Description <code>GET</code> /api/lists Gets all lists. <code>GET</code> /api/lists/:<code>list_id</code> Gets a single list. <code>POST</code> /api/lists Creates a new list. <code>PUT</code> /api/lists/:<code>list_id</code> Modifies a list. <code>DELETE</code> /api/lists/:<code>list_id</code> Deletes a list."},{"location":"apis/lists/#get-apilists","title":"<code>GET</code> /api/lists","text":"<p>Gets lists.</p>"},{"location":"apis/lists/#parameters","title":"Parameters","text":"Name Type Required/Optional Description <code>query</code> string Optional Optional string to search a list by name. <code>order_by</code> string Optional Field to sort results by. <code>name|status|created_at|updated_at</code> <code>order</code> string Optional <code>ASC|DESC</code>Sort by ascending or descending order. <code>page</code> number Optional Page number for paginated results. <code>per_page</code> number Optional Results to return per page. Setting this to <code>all</code> skips pagination and returns all results."},{"location":"apis/lists/#example-request","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/lists?page=1&amp;per_page=100'\n</code></pre>"},{"location":"apis/lists/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"results\": [\n{\n\"id\": 1,\n\"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n\"updated_at\": \"2020-03-06T22:32:01.118327+01:00\",\n\"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"optin\": \"double\",\n\"tags\": [\n\"test\"\n],\n\"subscriber_count\": 2\n},\n{\n\"id\": 2,\n\"created_at\": \"2020-03-04T21:12:09.555013+01:00\",\n\"updated_at\": \"2020-03-06T22:34:46.405031+01:00\",\n\"uuid\": \"f20a2308-dfb5-4420-a56d-ecf0618a102d\",\n\"name\": \"get\",\n\"type\": \"private\",\n\"optin\": \"single\",\n\"tags\": [],\n\"subscriber_count\": 0\n}\n],\n\"total\": 5,\n\"per_page\": 20,\n\"page\": 1\n}\n}\n</code></pre>"},{"location":"apis/lists/#get-apilistslist_id","title":"<code>GET</code> /api/lists/:<code>list_id</code>","text":"<p>Gets a single list.</p>"},{"location":"apis/lists/#parameters_1","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>list_id</code> Path parameter number Required The id value of the list you want to get."},{"location":"apis/lists/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/lists/5'\n</code></pre>"},{"location":"apis/lists/#example-response_1","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 5,\n\"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n\"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n\"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n\"name\": \"Test list\",\n\"type\": \"public\",\n\"optin\": \"double\",\n\"tags\": [],\n\"subscriber_count\": 0\n}\n}\n</code></pre>"},{"location":"apis/lists/#post-apilists","title":"<code>POST</code> /api/lists","text":"<p>Creates a new list.</p>"},{"location":"apis/lists/#parameters_2","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description name Request body string Required The new list name. type Request body string Required List type, can be set to <code>private</code> or <code>public</code>. optin Request body string Required <code>single</code> or <code>double</code> optin. tags Request body string[] Optional The tags associated with the list."},{"location":"apis/lists/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X POST 'http://localhost:9000/api/lists'\n</code></pre>"},{"location":"apis/lists/#example-response_2","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 5,\n\"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n\"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n\"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n\"name\": \"Test list\",\n\"type\": \"public\",\n\"tags\": [],\n\"subscriber_count\": 0\n}\n}\nnull\n</code></pre>"},{"location":"apis/lists/#put-apilistslist_id","title":"<code>PUT</code> /api/lists/<code>list_id</code>","text":"<p>Modifies a list.</p>"},{"location":"apis/lists/#parameters_3","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>list_id</code> Path parameter number Required The id of the list to be modified. name Request body string Optional The name which the old name will be modified to. type Request body string Optional List type, can be set to <code>private</code> or <code>public</code>. optin Request body string Optional <code>single</code> or <code>double</code> optin. tags Request body string[] Optional The tags associated with the list."},{"location":"apis/lists/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X PUT 'http://localhost:9000/api/lists/5' \\\n--form 'name=modified test list' \\\n--form 'type=private'\n</code></pre>"},{"location":"apis/lists/#example-response_3","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 5,\n\"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n\"updated_at\": \"2020-03-07T06:52:15.208075+01:00\",\n\"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n\"name\": \"modified test list\",\n\"type\": \"private\",\n\"optin\": \"single\",\n\"tags\": [],\n\"subscriber_count\": 0\n}\n}\n</code></pre>"},{"location":"apis/media/","title":"API / Media","text":"Method Endpoint Description <code>GET</code> /api/media Gets an uploaded media file. <code>POST</code> /api/media Uploads a media file. <code>DELETE</code> /api/media/:<code>media_id</code> Deletes uploaded media files."},{"location":"apis/media/#get-apimedia","title":"<code>GET</code> /api/media","text":"<p>Gets an uploaded media file.</p>"},{"location":"apis/media/#example-request","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------093715978792575906250298'\n</code></pre>"},{"location":"apis/media/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": [\n{\n\"id\": 1,\n\"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n\"filename\": \"Media file\",\n\"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n\"thumb_url\": \"/uploads/image_thumb.jpg\",\n\"uri\": \"/uploads/image.jpg\"\n}\n]\n}\n</code></pre> <p>Response definitions The following table describes each item in the response.</p> Response item Description Data type data Array of the media file objects, which contains an information about the uploaded media files array id Media file object ID number (int) uuid Media file uuid string (uuid) filename Name of the media file string created_at Date and time, when the media file object was created String (localDateTime) thumb_uri The thumbnail URI of the media file string uri URI of the media file string"},{"location":"apis/media/#post-apimedia","title":"<code>POST</code> /api/media","text":"<p>Uploads a media file.</p>"},{"location":"apis/media/#parameters","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description file Request body Media file Required The media file to be uploaded."},{"location":"apis/media/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X POST 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------183679989870526937212428' \\\n--form 'file=@/path/to/image.jpg'\n</code></pre>"},{"location":"apis/media/#example-response_1","title":"Example Response","text":"<p><pre><code>{\n\"data\": {\n\"id\": 1,\n\"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n\"filename\": \"Media file\",\n\"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n\"thumb_uri\": \"/uploads/image_thumb.jpg\",\n\"uri\": \"/uploads/image.jpg\"\n}\n}\n</code></pre> Response definitions</p> Response item Description Data type data True means that the media file was successfully uploaded boolean"},{"location":"apis/media/#delete-apimediamedia_id","title":"<code>DELETE</code> /api/media/:<code>media_id</code>","text":"<p>Deletes an uploaded media file.</p>"},{"location":"apis/media/#parameters_1","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>Media_id</code> Path Parameter Number Required The id of the media file you want to delete."},{"location":"apis/media/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X DELETE 'http://localhost:9000/api/media/1'\n</code></pre>"},{"location":"apis/media/#example-response_2","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre> <p>Response definitions</p> Response item Description Data type data True means that the media file was successfully deleted boolean"},{"location":"apis/subscribers/","title":"API / Subscribers","text":"Method Endpoint Description <code>GET</code> /api/subscribers Gets all subscribers. <code>GET</code> /api/subscribers/:<code>id</code> Gets a single subscriber. <code>GET</code> /api/subscribers/lists/:<code>id</code> Gets subscribers in a list. <code>GET</code> /api/subscribers Gets subscribers in one or more lists. <code>GET</code> /api/subscribers Gets subscribers filtered by an arbitrary SQL expression. <code>POST</code> /api/subscribers Creates a new subscriber. <code>POST</code> /api/subscribers Unauthenticated API that enables public subscription. <code>PUT</code> /api/subscribers/lists Modify subscribers' list memberships. <code>PUT</code> /api/subscribers/:<code>id</code> Updates a subscriber by ID. <code>PUT</code> /api/subscribers/:<code>id</code>/blocklist Blocklists a single subscriber. <code>PUT</code> /api/subscribers/blocklist Blocklists one or more subscribers. <code>PUT</code> /api/subscribers/query/blocklist Blocklists subscribers with an arbitrary SQL expression. <code>DELETE</code> /api/subscribers/:<code>id</code> Deletes a single subscriber. <code>DELETE</code> /api/subscribers Deletes one or more subscribers . <code>POST</code> /api/subscribers/query/delete Deletes subscribers with an arbitrary SQL expression."},{"location":"apis/subscribers/#get-apisubscribers","title":"<code>GET</code> /api/subscribers","text":"<p>Gets all subscribers. </p>"},{"location":"apis/subscribers/#example-request","title":"Example Request","text":"<pre><code>curl -u 'username:password' 'http://localhost:9000/api/subscribers?page=1&amp;per_page=100' </code></pre> <p>To skip pagination and retrieve all records, pass <code>per_page=all</code>.</p>"},{"location":"apis/subscribers/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"results\": [\n{\n\"id\": 1,\n\"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n\"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n\"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n\"email\": \"john@example.com\",\n\"name\": \"John Doe\",\n\"attribs\": {\n\"city\": \"Bengaluru\",\n\"good\": true,\n\"type\": \"known\"\n},\n\"status\": \"enabled\",\n\"lists\": [\n{\n\"subscription_status\": \"unconfirmed\",\n\"id\": 1,\n\"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"tags\": [\n\"test\"\n],\n\"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n\"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n}\n]\n},\n{\n\"id\": 2,\n\"created_at\": \"2020-02-18T21:10:17.218979+01:00\",\n\"updated_at\": \"2020-02-18T21:10:17.218979+01:00\",\n\"uuid\": \"ccf66172-f87f-4509-b7af-e8716f739860\",\n\"email\": \"quadri@example.com\",\n\"name\": \"quadri\",\n\"attribs\": {},\n\"status\": \"enabled\",\n\"lists\": [\n{\n\"subscription_status\": \"unconfirmed\",\n\"id\": 1,\n\"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"tags\": [\n\"test\"\n],\n\"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n\"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n}\n]\n},\n{\n\"id\": 3,\n\"created_at\": \"2020-02-19T19:10:49.36636+01:00\",\n\"updated_at\": \"2020-02-19T19:10:49.36636+01:00\",\n\"uuid\": \"5d940585-3cc8-4add-b9c5-76efba3c6edd\",\n\"email\": \"sugar@example.com\",\n\"name\": \"sugar\",\n\"attribs\": {},\n\"status\": \"enabled\",\n\"lists\": []\n}\n],\n\"query\": \"\",\n\"total\": 3,\n\"per_page\": 20,\n\"page\": 1\n}\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscribersid","title":"<code>GET</code> /api/subscribers/:<code>id</code>","text":"<p>Gets a single subscriber. </p>"},{"location":"apis/subscribers/#parameters","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>id</code> Path parameter Number Required The id value of the subscriber you want to get."},{"location":"apis/subscribers/#example-request_1","title":"Example Request","text":"<pre><code>curl -u 'username:password' 'http://localhost:9000/api/subscribers/1' </code></pre>"},{"location":"apis/subscribers/#example-response_1","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n\"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n\"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n\"email\": \"john@example.com\",\n\"name\": \"John Doe\",\n\"attribs\": {\n\"city\": \"Bengaluru\",\n\"good\": true,\n\"type\": \"known\"\n},\n\"status\": \"enabled\",\n\"lists\": [\n{\n\"subscription_status\": \"unconfirmed\",\n\"id\": 1,\n\"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"tags\": [\n\"test\"\n],\n\"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n\"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n}\n]\n}\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscribers_1","title":"<code>GET</code> /api/subscribers","text":"<p>Gets subscribers in one or more lists. </p>"},{"location":"apis/subscribers/#parameters_1","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>List_id</code> Request body Number Required ID of the list to fetch subscribers from."},{"location":"apis/subscribers/#example-request_2","title":"Example Request","text":"<pre><code>curl -u 'username:password' 'http://localhost:9000/api/subscribers?list_id=1&amp;list_id=2&amp;page=1&amp;per_page=100'\n</code></pre> <p>To skip pagination and retrieve all records, pass <code>per_page=all</code>.</p>"},{"location":"apis/subscribers/#example-response_2","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"results\": [\n{\n\"id\": 1,\n\"created_at\": \"2019-06-26T16:51:54.37065+05:30\",\n\"updated_at\": \"2019-07-03T11:53:53.839692+05:30\",\n\"uuid\": \"5e91dda1-1c16-467d-9bf9-2a21bf22ae21\",\n\"email\": \"test@test.com\",\n\"name\": \"Test Subscriber\",\n\"attribs\": {\n\"city\": \"Bengaluru\",\n\"projects\": 3,\n\"stack\": {\n\"languages\": [\"go\", \"python\"]\n}\n},\n\"status\": \"enabled\",\n\"lists\": [\n{\n\"subscription_status\": \"unconfirmed\",\n\"id\": 1,\n\"uuid\": \"41badaf2-7905-4116-8eac-e8817c6613e4\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"tags\": [\"test\"],\n\"created_at\": \"2019-06-26T16:51:54.367719+05:30\",\n\"updated_at\": \"2019-06-26T16:51:54.367719+05:30\"\n}\n]\n}\n],\n\"query\": \"\",\n\"total\": 1,\n\"per_page\": 20,\n\"page\": 1\n}\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscribers_2","title":"<code>GET</code> /api/subscribers","text":"<p>Gets subscribers with an SQL expression.</p>"},{"location":"apis/subscribers/#example-request_3","title":"Example Request","text":"<pre><code>curl -u 'username:password' -X GET 'http://localhost:9000/api/subscribers' \\\n--url-query 'page=1' \\\n--url-query 'per_page=100' \\\n--url-query \"query=subscribers.name LIKE 'Test%' AND subscribers.attribs-&gt;&gt;'city' = 'Bengaluru'\"\n</code></pre> <p>To skip pagination and retrieve all records, pass <code>per_page=all</code>.</p> <p>Refer to the querying and segmentation section for more information on how to query subscribers with SQL expressions.</p>"},{"location":"apis/subscribers/#example-response_3","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"results\": [\n{\n\"id\": 1,\n\"created_at\": \"2019-06-26T16:51:54.37065+05:30\",\n\"updated_at\": \"2019-07-03T11:53:53.839692+05:30\",\n\"uuid\": \"5e91dda1-1c16-467d-9bf9-2a21bf22ae21\",\n\"email\": \"test@test.com\",\n\"name\": \"Test Subscriber\",\n\"attribs\": {\n\"city\": \"Bengaluru\",\n\"projects\": 3,\n\"stack\": {\n\"frameworks\": [\"echo\", \"go\"],\n\"languages\": [\"go\", \"python\"]\n}\n},\n\"status\": \"enabled\",\n\"lists\": [\n{\n\"subscription_status\": \"unconfirmed\",\n\"id\": 1,\n\"uuid\": \"41badaf2-7905-4116-8eac-e8817c6613e4\",\n\"name\": \"Default list\",\n\"type\": \"public\",\n\"tags\": [\"test\"],\n\"created_at\": \"2019-06-26T16:51:54.367719+05:30\",\n\"updated_at\": \"2019-06-26T16:51:54.367719+05:30\"\n}\n]\n}\n],\n\"query\": \"subscribers.name LIKE 'Test%' AND subscribers.attribs-\\u003e\\u003e'city' = 'Bengaluru'\",\n\"total\": 1,\n\"per_page\": 20,\n\"page\": 1\n}\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apisubscribers","title":"<code>POST</code> /api/subscribers","text":"<p>Creates a new subscriber.</p>"},{"location":"apis/subscribers/#parameters_2","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description email Request body String Required The email address of the new subscriber. name Request body String Required The name of the new subscriber. status Request body String Required The status of the new subscriber. Can be enabled, disabled or blocklisted. lists Request body Numbers Optional Array of list IDs to subscribe to (marked as <code>unconfirmed</code> by default). attribs Request body json Optional JSON list containing new subscriber's attributes. preconfirm_subscriptions Request body Bool Optional If <code>true</code>, marks subscriptions as <code>confirmed</code> and no-optin e-mails are sent for double opt-in lists."},{"location":"apis/subscribers/#example-request_4","title":"Example Request","text":"<pre><code>curl -u 'username:password' 'http://localhost:9000/api/subscribers' -H 'Content-Type: application/json' \\\n--data '{\"email\":\"subsriber@domain.com\",\"name\":\"The Subscriber\",\"status\":\"enabled\",\"lists\":[1],\"attribs\":{\"city\":\"Bengaluru\",\"projects\":3,\"stack\":{\"languages\":[\"go\",\"python\"]}}}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_4","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 3,\n\"created_at\": \"2019-07-03T12:17:29.735507+05:30\",\n\"updated_at\": \"2019-07-03T12:17:29.735507+05:30\",\n\"uuid\": \"eb420c55-4cfb-4972-92ba-c93c34ba475d\",\n\"email\": \"subsriber@domain.com\",\n\"name\": \"The Subscriber\",\n\"attribs\": {\n\"city\": \"Bengaluru\",\n\"projects\": 3,\n\"stack\": { \"languages\": [\"go\", \"python\"] }\n},\n\"status\": \"enabled\",\n\"lists\": [1]\n}\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apipublicsubscription","title":"<code>POST</code> /api/public/subscription","text":"<p>This is a public, unauthenticated API meant for directly integrating forms for public subscription. The API supports both form encoded or a JSON encoded body. </p>"},{"location":"apis/subscribers/#parameters_3","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description email Request body String Required The email address of the subscriber. name Request body String Optional The name of the new subscriber. list_uuids Request body Strings Required Array of list UUIDs."},{"location":"apis/subscribers/#example-json-request","title":"Example JSON Request","text":"<pre><code>curl -u 'http://localhost:9000/api/public/subscription' -H 'Content-Type: application/json' \\\n--data '{\"email\":\"subsriber@domain.com\",\"name\":\"The Subscriber\", \"lists\": [\"eb420c55-4cfb-4972-92ba-c93c34ba475d\", \"0c554cfb-eb42-4972-92ba-c93c34ba475d\"]}'\n</code></pre>"},{"location":"apis/subscribers/#example-form-request","title":"Example Form Request","text":"<pre><code>curl -u 'http://localhost:9000/api/public/subscription' \\\n-d 'email=subsriber@domain.com' -d 'name=The Subscriber' -d 'l=eb420c55-4cfb-4972-92ba-c93c34ba475d' -d 'l=0c554cfb-eb42-4972-92ba-c93c34ba475d'\n</code></pre> <p>Notice that in form request, there param is <code>l</code> that is repeated for multiple lists, and not <code>lists</code> like in JSON.</p>"},{"location":"apis/subscribers/#example-response_5","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#put-apisubscriberslists","title":"<code>PUT</code> /api/subscribers/lists","text":"<p>Modify subscribers list memberships.</p>"},{"location":"apis/subscribers/#parameters_4","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>ids</code> Request body Numbers Required The ids of the subscribers to be modified. <code>action</code> Request body String Required Whether to <code>add</code>, <code>remove</code>, or <code>unsubscribe</code> the users. <code>target_list_ids</code> Request body Numbers Required The ids of the lists to be modified. <code>status</code> Request body String Required for <code>add</code> <code>confirmed</code>, <code>unconfirmed</code>, or <code>unsubscribed</code> status."},{"location":"apis/subscribers/#example-request_5","title":"Example Request","text":"<p>To subscribe users 1, 2, and 3 to lists 4, 5, and 6:</p> <pre><code>curl -u 'username:password' -X PUT 'http://localhost:9000/api/subscribers/lists' \\\n--data-raw '{\"ids\": [1, 2, 3], \"action\": \"add\", \"target_list_ids\": [4, 5, 6], \"status\": \"confirmed\"}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_6","title":"Example Response","text":"<pre><code>{\n\"data\": true\n} </code></pre>"},{"location":"apis/subscribers/#put-apisubscribersid","title":"<code>PUT</code> /api/subscribers/:<code>id</code>","text":"<p>Updates a single subscriber.</p>"},{"location":"apis/subscribers/#parameters_5","title":"Parameters","text":"<p>Parameters are the same as POST /api/subscribers used for subscriber creation. </p> <p>Please note that this is a <code>PUT</code> request, so all the parameters have to be set. For example if you don't provide <code>lists</code>, the subscriber will be deleted from all the lists he was previously signed on.</p>"},{"location":"apis/subscribers/#put-apisubscribersidblocklist","title":"<code>PUT</code> /api/subscribers/:<code>id</code>/blocklist","text":"<p>Blocklists a single subscriber.</p>"},{"location":"apis/subscribers/#parameters_6","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>id</code> Path parameter Number Required The id value of the subscriber you want to blocklist."},{"location":"apis/subscribers/#example-request_6","title":"Example Request","text":"<pre><code>curl -u 'username:password' -X PUT 'http://localhost:9000/api/subscribers/9/blocklist'\n</code></pre>"},{"location":"apis/subscribers/#example-response_7","title":"Example Response","text":"<pre><code>{\n\"data\": true\n} </code></pre>"},{"location":"apis/subscribers/#put-apisubscribersqueryblocklist","title":"<code>PUT</code> /api/subscribers/query/blocklist","text":"<p>Blocklists subscribers with an arbitrary sql expression.</p>"},{"location":"apis/subscribers/#example-request_7","title":"Example Request","text":"<pre><code>curl -u 'username:password' -X PUT 'http://localhost:9000/api/subscribers/query/blocklist' \\\n--data-raw '\"query=subscribers.name LIKE '\\''John Doe'\\'' AND subscribers.attribs-&gt;&gt;'\\''city'\\'' = '\\''Bengaluru'\\''\"'\n</code></pre> <p>Refer to the querying and segmentation section for more information on how to query subscribers with SQL expressions.</p>"},{"location":"apis/subscribers/#example-response_8","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#delete-apisubscribersid","title":"<code>DELETE</code> /api/subscribers/:<code>id</code>","text":"<p>Deletes a single subscriber. </p>"},{"location":"apis/subscribers/#parameters_7","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description <code>id</code> Path parameter Number Required The id of the subscriber you want to delete."},{"location":"apis/subscribers/#example-request_8","title":"Example  Request","text":"<pre><code>curl -u 'username:password' -X DELETE 'http://localhost:9000/api/subscribers/9'\n</code></pre>"},{"location":"apis/subscribers/#example-response_9","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#delete-apisubscribers","title":"<code>DELETE</code> /api/subscribers","text":"<p>Deletes one or more subscribers.</p>"},{"location":"apis/subscribers/#parameters_8","title":"Parameters","text":"Name Parameter type Data type Required/Optional Description id Query parameters Number Required The id of the subscribers you want to delete."},{"location":"apis/subscribers/#example-request_9","title":"Example Request","text":"<pre><code>curl -u 'username:password' -X DELETE 'http://localhost:9000/api/subscribers?id=10&amp;id=11'\n</code></pre>"},{"location":"apis/subscribers/#example-response_10","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apisubscribersquerydelete","title":"<code>POST</code> /api/subscribers/query/delete","text":"<p>Deletes subscribers with an arbitrary SQL expression.</p>"},{"location":"apis/subscribers/#example-request_10","title":"Example Request","text":"<pre><code>curl -u 'username:password' -X POST 'http://localhost:9000/api/subscribers/query/delete' \\\n--data-raw '\"query=subscribers.name LIKE '\\''John Doe'\\'' AND subscribers.attribs-&gt;&gt;'\\''city'\\'' = '\\''Bengaluru'\\''\"'\n</code></pre> <p>Refer to the querying and segmentation section for more information on how to query subscribers with SQL expressions.</p>"},{"location":"apis/subscribers/#example-response_11","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/templates/","title":"API / Templates","text":"Method Endpoint Description <code>GET</code> /api/templates Gets all templates. <code>GET</code> /api/templates/:<code>template_id</code> Gets a single template. <code>GET</code> /api/templates/:<code>template_id</code>/preview Gets the HTML preview of a template. <code>POST</code> /api/templates/preview <code>POST</code> /api/templates Creates a template. <code>PUT</code> /api/templates/:<code>template_id</code> Modifies a template. <code>PUT</code> /api/templates/:<code>template_id</code>/default Sets a template to the default template. <code>DELETE</code> /api/templates/:<code>template_id</code> Deletes a template."},{"location":"apis/templates/#get-apitemplates","title":"<code>GET</code> /api/templates","text":"<p>Gets all templates.</p>"},{"location":"apis/templates/#example-request","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/templates'\n</code></pre>"},{"location":"apis/templates/#example-response","title":"Example Response","text":"<pre><code>{\n\"data\": [\n{\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"name\": \"Default template\",\n\"body\": \"{{ template \\\"content\\\" . }}\",\n\"type\": \"campaign\",\n\"is_default\": true\n}\n]\n}\n</code></pre>"},{"location":"apis/templates/#get-apitemplatestemplate_id","title":"<code>GET</code> /api/templates/:<code>template_id</code>","text":"<p>Gets a single template.</p>"},{"location":"apis/templates/#parameters","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>template_id</code> Path Parameter Number Required The id value of the template you want to get."},{"location":"apis/templates/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/templates/1'\n</code></pre>"},{"location":"apis/templates/#example-response_1","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"name\": \"Default template\",\n\"body\": \"{{ template \\\"content\\\" . }}\",\n\"type\": \"campaign\",\n\"is_default\": true\n}\n}\n</code></pre>"},{"location":"apis/templates/#get-apitemplatestemplate_idpreview","title":"<code>GET</code> /api/templates/:<code>template_id</code>/preview","text":"<p>Gets the HTML preview of a template body.</p>"},{"location":"apis/templates/#parameters_1","title":"Parameters","text":"Name Parameter Type Data  Type Required/Optional Description <code>template_id</code> Path Parameter Number Required The id value of the template whose html preview you want to get."},{"location":"apis/templates/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X GET 'http://localhost:9000/api/templates/1/preview'\n</code></pre>"},{"location":"apis/templates/#example-response_2","title":"Example Response","text":"<pre><code>&lt;p&gt;Hi there&lt;/p&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis et elit ac elit sollicitudin condimentum non a magna.\n    Sed tempor mauris in facilisis vehicula. Aenean nisl urna, accumsan ac tincidunt vitae, interdum cursus massa.\n    Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam varius turpis et turpis lacinia placerat.\n    Aenean id ligula a orci lacinia blandit at eu felis. Phasellus vel lobortis lacus. Suspendisse leo elit, luctus sed\n    erat ut, venenatis fermentum ipsum. Donec bibendum neque quis.&lt;/p&gt;\n\n&lt;h3&gt;Sub heading&lt;/h3&gt;\n&lt;p&gt;Nam luctus dui non placerat mattis. Morbi non accumsan orci, vel interdum urna. Duis faucibus id nunc ut euismod.\n    Curabitur et eros id erat feugiat fringilla in eget neque. Aliquam accumsan cursus eros sed faucibus.&lt;/p&gt;\n\n&lt;p&gt;Here is a link to &lt;a href=\"https://listmonk.app\" target=\"_blank\"&gt;listmonk&lt;/a&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"apis/templates/#put-apitemplatestemplate_iddefault","title":"<code>PUT</code> /api/templates/:<code>template_id</code>/default","text":"<p>Sets a template to the default template.</p>"},{"location":"apis/templates/#parameters_2","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>template_id</code> Path Parameter Number Required The id value of the template you want to set to the default template."},{"location":"apis/templates/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X PUT 'http://localhost:9000/api/templates/1/default'\n</code></pre>"},{"location":"apis/templates/#example-response_3","title":"Example Response","text":"<pre><code>{\n\"data\": {\n\"id\": 1,\n\"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n\"name\": \"Default template\",\n\"body\": \"{{ template \\\"content\\\" . }}\",\n\"type\": \"campaign\",\n\"is_default\": true\n}\n}\n</code></pre>"},{"location":"apis/templates/#delete-apitemplatestemplate_id","title":"<code>DELETE</code> /api/templates/:<code>template_id</code>","text":"<p>Deletes a template.</p>"},{"location":"apis/templates/#parameters_3","title":"Parameters","text":"Name Parameter Type Data Type Required/Optional Description <code>template_id</code> Path Parameter Number Required The id value of the template you want to delete."},{"location":"apis/templates/#example-request_4","title":"Example Request","text":"<pre><code>curl -u \"username:username\" -X DELETE 'http://localhost:9000/api/templates/35'\n</code></pre>"},{"location":"apis/templates/#example-response_4","title":"Example Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/transactional/","title":"API / Transactional","text":"Method Endpoint Description <code>POST</code> /api/tx"},{"location":"apis/transactional/#post-apitx","title":"POST /api/tx","text":"<p>Send a transactional message to one or multiple subscribers using a predefined transactional template.</p>"},{"location":"apis/transactional/#parameters","title":"Parameters","text":"Name Data Type Optional Description <code>subscriber_email</code> String Optional E-mail of the subscriber. Either this or <code>subscriber_id</code> should be passed. <code>subscriber_id</code> Number Optional ID of the subscriber. Either this or <code>subscriber_email</code> should be passed. <code>subscriber_emails</code> []String Optional E-mails of the subscribers. This is an alternative to <code>subscriber_email</code> for multiple recipients. <code>[\"email1@example.com\", \"emailX@example.com\"]</code> <code>subscriber_ids</code> []Number Optional IDs of the subscribers. This is an alternative to <code>subscriber_id</code> for multiple recipients. <code>[1,2,3]</code> <code>template_id</code> Number Required ID of the transactional template to use in the message. <code>from_email</code> String Optional Optional <code>from</code> email. eg: <code>Company &lt;email@company.com&gt;</code> <code>data</code> Map Optional Optional data in <code>{}</code> nested map. Available in the template as <code>{{ .Tx.Data.* }}</code> <code>headers</code> []Map Optional Optional array of mail headers. <code>[{\"key\": \"value\"}, {\"key\": \"value\"}]</code> <code>messenger</code> String Optional Messenger to use to send the message. Default value is <code>email</code>. <code>content_type</code> String Optional <code>html</code>, <code>markdown</code>, <code>plain</code>"},{"location":"apis/transactional/#request","title":"Request","text":"<pre><code>curl -u \"username:password\" \"http://localhost:9000/api/tx\" -X POST \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n--data-binary @- &lt;&lt; EOF\n    {\n        \"subscriber_email\": \"user@test.com\",\n        \"template_id\": 2,\n        \"data\": {\"order_id\": \"1234\", \"date\": \"2022-07-30\", \"items\": [1, 2, 3]},\n        \"content_type\": \"html\"\n    }\nEOF\n</code></pre>"},{"location":"apis/transactional/#response","title":"Response","text":"<pre><code>{\n\"data\": true\n}\n</code></pre>"},{"location":"apis/transactional/#file-attachments","title":"File Attachments","text":"<p>To include file attachments in a transactional message, use Content-Type <code>multipart/form-data</code>. Use the parameters described above as a JSON object via the <code>data</code> form key and include an arbitrary number of attachments via the <code>file</code> key.</p> <pre><code>curl -u \"username:password\" \"http://localhost:9000/api/tx\" -X POST \\\n-F 'data=\\\"{\n    \\\"subscriber_email\\\": \\\"user@test.com\\\",\n    \\\"template_id\\\": 4\n}\"' \\\n-F 'file=@\"/path/to/attachment.pdf\"' \\\n-F 'file=@\"/path/to/attachment2.pdf\"'\n</code></pre>"}]}